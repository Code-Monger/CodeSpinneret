name: Build and Release Go Applications

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name (default: latest-release)'
        required: false
        default: 'latest-release'
      build_linux_amd64:
        description: 'Build for Linux (amd64)'
        required: false
        default: true
        type: boolean
      build_linux_arm:
        description: 'Build for Linux (arm)'
        required: false
        default: true
        type: boolean
      build_linux_arm64:
        description: 'Build for Linux (arm64)'
        required: false
        default: true
        type: boolean
      build_windows_amd64:
        description: 'Build for Windows (amd64)'
        required: false
        default: true
        type: boolean
      build_darwin_amd64:
        description: 'Build for macOS (amd64)'
        required: false
        default: true
        type: boolean
      build_darwin_arm64:
        description: 'Build for macOS (arm64)'
        required: false
        default: true
        type: boolean

env:
  GO_VERSION: '1.24'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract repository name
        id: repo-name
        run: |
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F/ '{print $2}')
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          
      - name: Set build configuration
        id: config
        run: |
          # Set defaults based on workflow inputs
          RELEASE_NAME='latest-release'
          BUILD_LINUX_AMD64='true'
          BUILD_LINUX_ARM='true'
          BUILD_LINUX_ARM64='true'
          BUILD_WINDOWS_AMD64='true'
          BUILD_DARWIN_AMD64='false'
          BUILD_DARWIN_ARM64='false'
          
          # Override with actual inputs if workflow_dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RELEASE_NAME='${{ github.event.inputs.release_name }}'
            BUILD_LINUX_AMD64='${{ github.event.inputs.build_linux_amd64 }}'
            BUILD_LINUX_ARM='${{ github.event.inputs.build_linux_arm }}'
            BUILD_LINUX_ARM64='${{ github.event.inputs.build_linux_arm64 }}'
            BUILD_WINDOWS_AMD64='${{ github.event.inputs.build_windows_amd64 }}'
            BUILD_DARWIN_AMD64='${{ github.event.inputs.build_darwin_amd64 }}'
            BUILD_DARWIN_ARM64='${{ github.event.inputs.build_darwin_arm64 }}'
          fi
          
          # Export all variables
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "build_linux_amd64=$BUILD_LINUX_AMD64" >> $GITHUB_OUTPUT
          echo "build_linux_arm=$BUILD_LINUX_ARM" >> $GITHUB_OUTPUT
          echo "build_linux_arm64=$BUILD_LINUX_ARM64" >> $GITHUB_OUTPUT
          echo "build_windows_amd64=$BUILD_WINDOWS_AMD64" >> $GITHUB_OUTPUT
          echo "build_darwin_amd64=$BUILD_DARWIN_AMD64" >> $GITHUB_OUTPUT
          echo "build_darwin_arm64=$BUILD_DARWIN_ARM64" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false  # Disable the built-in cache to avoid tar extraction errors

      - name: Find Go applications in cmd directory
        id: find-apps
        run: |
          APPS=$(find ./cmd -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | tr '\n' ' ')
          echo "Found applications: $APPS"
          echo "apps=$APPS" >> $GITHUB_OUTPUT

      - name: Update dependencies
        run: |
          # Update and tidy dependencies
          go get -u ./...
          go mod tidy
          # Create vendor directory if using vendoring
          go mod vendor

      - name: Build for multiple platforms
        run: |
          for app in ${{ steps.find-apps.outputs.apps }}; do
            echo "Building $app for multiple platforms..."
            
            # Linux build (amd64)
            if ${{ steps.config.outputs.build_linux_amd64 == 'true' }}; then
              echo "Building for Linux (amd64)..."
              mkdir -p ./dist/linux_amd64
              GOOS=linux GOARCH=amd64 go build -mod=vendor -tags netgo -ldflags="-s -w" -o ./dist/linux_amd64/$app ./cmd/$app
            fi
            
            # Linux build (arm)
            if ${{ steps.config.outputs.build_linux_arm == 'true' }}; then
              echo "Building for Linux (arm)..."
              mkdir -p ./dist/linux_arm
              GOOS=linux GOARCH=arm go build -mod=vendor -tags netgo -ldflags="-s -w" -o ./dist/linux_arm/$app ./cmd/$app
            fi
            
            # Linux build (arm64)
            if ${{ steps.config.outputs.build_linux_arm64 == 'true' }}; then
              echo "Building for Linux (arm64)..."
              mkdir -p ./dist/linux_arm64
              GOOS=linux GOARCH=arm64 go build -mod=vendor -tags netgo -ldflags="-s -w" -o ./dist/linux_arm64/$app ./cmd/$app
            fi
            
            # Windows build (amd64)
            if ${{ steps.config.outputs.build_windows_amd64 == 'true' }}; then
              echo "Building for Windows (amd64)..."
              mkdir -p ./dist/windows_amd64
              GOOS=windows GOARCH=amd64 go build -mod=vendor -tags netgo -ldflags="-s -w" -o ./dist/windows_amd64/$app.exe ./cmd/$app
            fi
            
            # macOS build (amd64)
            if ${{ steps.config.outputs.build_darwin_amd64 == 'true' }}; then
              echo "Building for macOS (amd64)..."
              mkdir -p ./dist/darwin_amd64
              GOOS=darwin GOARCH=amd64 go build -mod=vendor -tags netgo -ldflags="-s -w" -o ./dist/darwin_amd64/$app ./cmd/$app
            fi
            
            # macOS build (arm64) for M1/M2 Macs
            if ${{ steps.config.outputs.build_darwin_arm64 == 'true' }}; then
              echo "Building for macOS (arm64)..."
              mkdir -p ./dist/darwin_arm64
              GOOS=darwin GOARCH=arm64 go build -mod=vendor -tags netgo -ldflags="-s -w" -o ./dist/darwin_arm64/$app ./cmd/$app
            fi
          done

      - name: Create ZIP archive
        run: |
          cd dist
          zip -r ../${{ steps.repo-name.outputs.repo_name }}-${{ steps.config.outputs.release_name }}.zip *
          cd ..

      - name: Delete existing release if it exists
        run: |
          if gh release view ${{ steps.config.outputs.release_name }} &>/dev/null; then
            echo "Deleting existing release: ${{ steps.config.outputs.release_name }}"
            gh release delete ${{ steps.config.outputs.release_name }} --yes
          else
            echo "No existing release found with name: ${{ steps.config.outputs.release_name }}"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create new release
        run: |
          gh release create ${{ steps.config.outputs.release_name }} \
            --title "${{ steps.config.outputs.release_name }}" \
            --notes "Automated build from $(git rev-parse --short HEAD)" \
            --latest \
            ${{ steps.repo-name.outputs.repo_name }}-${{ steps.config.outputs.release_name }}.zip
        env:
          GH_TOKEN: ${{ github.token }}